import logging
import click

from . import logger
from . import opts
from .pipeline import bam_pipeline_subcommand, csl_pipeline_subcommand


log = logging.getLogger('snco')


@click.group()
@click.version_option()
def main():
    '''
    snco: a toolkit for performing crossover mapping from single nucleus RNA/ATAC sequencing data
    '''
    pass


main.add_command(bam_pipeline_subcommand)
main.add_command(csl_pipeline_subcommand)


loadbam_options = [
    opts.bam, opts.output_json, opts.cb_whitelist, opts.bin_size,
    opts.seq_type, opts.cb_corr_method, opts.cb_tag,
    opts.umi_collapse_method, opts.umi_tag,
    opts.hap_tag, opts.excl_contigs,
    opts.processes, logger.verbosity
]

@main.command('loadbam')
@opts.apply_options(loadbam_options)
def loadbam_subcommand(**kwargs):
    '''
    Read bam file with cell barcode, umi and haplotype tags (aligned with STAR solo+diploid), 
    to generate a json file of binned haplotype marker distributions for each cell barcode. 
    These can be used to call recombinations using the downstream `predict` command.
    '''
    from .loadbam import run_loadbam
    run_loadbam(**kwargs)


loadcsl_options = [
    opts.csl_dir, opts.chrom_sizes, opts.output_json,
    opts.cb_whitelist, opts.bin_size,
    logger.verbosity
]


@main.command('loadcsl')
@opts.apply_options(loadcsl_options)
def loadcsl_subcommand(**kwargs):
    '''
    Read matrix files generated by cell snp lite to generate a json file of binned
    haplotype marker distributions for each cell barcode. These can be used to
    call recombinations using the downstream `predict` command.
    '''
    run_loadcsl(**kwargs)


sim_options = [
    opts.marker_json, opts.haplo_bed, opts.output_json,
    opts.cb_whitelist, opts.bin_size,
    opts.bg_marker_rate, opts.bg_window_size, opts.nsim_per_samp,
    logger.verbosity
]


@main.command('sim')
@opts.apply_options(sim_options)
def sim_subcommand(**kwargs):
    '''
    Simulate realistic haplotype marker distributions using real data from `load`,
    with known haplotypes/crossovers supplied from a bed file.
    '''
    from .loadcsl import run_loadcsl
    run_sim(**kwargs)


concat_options = [
    opts.concat_json, opts.output_json,
    opts.merge_suffixes,
    logger.verbosity
]


@main.command('concat')
@opts.apply_options(concat_options)
def concat_subcommand(**kwargs):
    '''
    Concatenates marker jsons, potentially from different datasets, 
    adding suffixes to cell barcodes to avoid name collisions
    '''
    from .concat import run_concat
    run_concat(**kwargs)


clean_options = [
    opts.marker_json, opts.output_json, opts.cb_whitelist, opts.bin_size,
    opts.min_markers, opts.max_bin_count,
    opts.clean_bg, opts.bg_window_size,
    opts.mask_imbalanced, opts.max_imbalance,
    logger.verbosity
]


@main.command('clean')
@opts.apply_options(clean_options)
def clean_subcommand(**kwargs):
    '''
    Removes predicted background markers, that result from ambient nucleic acids, 
    from each cell barcode.
    '''
    from .clean import run_clean
    run_clean(**kwargs)


predict_options = [
    opts.marker_json, opts.output_json, opts.cb_whitelist, opts.bin_size,
    opts.seg_size, opts.term_seg_size, opts.cm_per_mb, opts.model_lambdas,
    opts.precision, opts.processes, opts.batch_size, opts.device,
    logger.verbosity
]


@main.command('predict')
@opts.apply_options(predict_options)
def predict_subcommand(**kwargs):
    '''
    Uses rigid hidden Markov model to predict the haplotypes of each cell barcode
    at each genomic bin.
    '''
    from .predict import run_predict
    run_predict(**kwargs)

stats_options = [
    opts.marker_json, opts.pred_json, opts.output_tsv,
    opts.cb_whitelist, opts.bin_size,
    opts.precision, logger.verbosity
]


@main.command('stats')
@opts.apply_options(stats_options)
def stats_subcommand(**kwargs):
    '''
    Scores the quality of data and predictions for a set of haplotype calls
    generated with `predict`.
    '''
    from .stats import run_stats
    run_stats(**kwargs)


plot_options = [
    opts.cell_barcode, opts.marker_json, opts.plot_pred_json, opts.output_fig,
    opts.figsize, opts.show_pred, opts.show_co_num, opts.max_yheight,
    opts.ref_colour, opts.alt_colour,
    logger.verbosity
]


@main.command('plot')
@opts.apply_options(plot_options)
def plot_subcommand(**kwargs):
    '''
    Draw a marker plot for a given cell barcode
    '''
    from .plot import run_plot
    run_plot(**kwargs)
