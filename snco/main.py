import logging
import click
import click_log

from . import opts
from .loadbam import run_loadbam
from .loadcsl import run_loadcsl
from .sim import run_sim
from .concat import run_concat
from .clean import run_clean
from .predict import run_predict
from .stats import run_stats
from .plot import run_plot


log = logging.getLogger('snco')
click_log.basic_config(log)
verbosity = click_log.simple_verbosity_option(log)


@click.group()
@click.version_option()
def main():
    '''
    snco: a toolkit for performing crossover mapping from single nucleus RNA/ATAC sequencing data
    '''
    pass


def apply_options(options_list):
    'decorator to apply a list of click options at once'
    def _apply_options(func):
        for option in reversed(options_list):
            func = option(func)
        return func
    return _apply_options


loadbam_options = [
    opts.bam, opts.output_json, opts.cb_whitelist, opts.bin_size,
    opts.cb_corr_method, opts.cb_tag,
    opts.umi_collapse_method, opts.umi_tag,
    opts.hap_tag, opts.excl_contigs,
    opts.processes, verbosity
]

@main.command('loadbam')
@apply_options(loadbam_options)
def loadbam_subcommand(**kwargs):
    '''
    Read bam file with cell barcode, umi and haplotype tags (aligned with STAR solo+diploid), 
    to generate a json file of binned haplotype marker distributions for each cell barcode. 
    These can be used to call recombinations using the downstream `predict` command.
    '''
    run_loadbam(**kwargs)


loadcsl_options = [
    opts.csl_dir, opts.chrom_sizes, opts.output_json,
    opts.cb_whitelist, opts.bin_size,
    verbosity
]


@main.command('loadcsl')
@apply_options(loadcsl_options)
def loadcsl_subcommand(**kwargs):
    '''
    Read matrix files generated by cell snp lite to generate a json file of binned
    haplotype marker distributions for each cell barcode. These can be used to
    call recombinations using the downstream `predict` command.
    '''
    run_loadcsl(**kwargs)


sim_options = [
    opts.marker_json, opts.haplo_bed, opts.output_json,
    opts.cb_whitelist, opts.bin_size,
    opts.bg_marker_rate, opts.bg_window_size, opts.nsim_per_samp,
    verbosity
]


@main.command('sim')
@apply_options(sim_options)
def sim_subcommand(**kwargs):
    '''
    Simulate realistic haplotype marker distributions using real data from `load`,
    with known haplotypes/crossovers supplied from a bed file.
    '''
    run_sim(**kwargs)


concat_options = [
    opts.concat_marker_json, opts.output_json,
    opts.cb_whitelist, opts.bin_size,
    verbosity
]


@main.command('concat')
@apply_options(concat_options)
def concat_subcommand(**kwargs):
    '''
    Not implemented, will concatenate marker jsons (avoiding CB collisions)
    '''
    run_concat(**kwargs)


clean_options = [
    opts.marker_json, opts.output_json, opts.cb_whitelist, opts.bin_size,
    opts.max_bin_count, opts.bg_window_size, opts.max_imbalance,
    verbosity
]


@main.command('clean')
@apply_options(clean_options)
def clean_subcommand(**kwargs):
    '''
    Removes predicted background markers, that result from ambient nucleic acids, 
    from each cell barcode.
    '''
    run_clean(**kwargs)


predict_options = [
    opts.marker_json, opts.output_json, opts.cb_whitelist, opts.bin_size,
    opts.seg_size, opts.term_seg_size, opts.cm_per_mb, opts.model_lambdas,
    opts.precision, opts.processes
]


@main.command('predict')
@apply_options(predict_options)
def predict_subcommand(**kwargs):
    '''
    Uses rigid hidden Markov model to predict the haplotypes of each cell barcode
    at each genomic bin.
    '''
    run_predict(**kwargs)


stats_options = [
    opts.marker_json, opts.pred_json, opts.output_tsv,
    opts.cb_whitelist, opts.bin_size,
    opts.precision, verbosity
]


@main.command('stats')
@apply_options(stats_options)
def stats_subcommand(**kwargs):
    '''
    Scores the quality of data and predictions for a set of haplotype calls
    generated with `predict`.
    '''
    run_stats(**kwargs)


plot_options = [
    opts.marker_json, opts.pred_json,
]


@main.command('plot')
@apply_options(plot_options)
def plot_subcommand(**kwargs):
    '''
    Not implemented, will provide plotting functionality
    '''
    run_plot(**kwargs)


if __name__ == '__main__':
    main()
