'''functions for converting cellsnp-lite output into snco.MarkerRecords format'''
import os
import logging
from scipy.io import mmread

from .utils import read_cb_whitelist
from .records import MarkerRecords

log = logging.getLogger('snco')


def read_chrom_sizes(chrom_sizes_fn):
    '''
    load dict of chromosome lengths from a 2 column text file or faidx file
    '''
    chrom_sizes = {}
    with open(chrom_sizes_fn) as f:
        for record in f:
            chrom, cs = record.strip().split('\t')[:2]
            chrom_sizes[chrom] = int(cs)
    return chrom_sizes


def read_vcf(vcf_fn, bin_size):
    '''
    read variant chromosomes and bin positions from cellsnp-lite vcf file
    '''
    with open(vcf_fn) as vcf:
        variants = []
        for record in vcf:
            if record.startswith('#'):
                continue
            chrom, pos = record.split('\t')[:2]
            variants.append((chrom, int(pos) // bin_size))
    log.info(f'Read {len(variants)} variants from vcf file {vcf_fn}')
    return variants


def parse_cellsnp_lite(csl_dir, chrom_sizes_fn, bin_size, cb_whitelist=None):
    '''
    read data from cellsnp-lite output into a MarkerRecords object
    '''
    dep_fn = os.path.join(csl_dir, 'cellSNP.tag.DP.mtx')
    alt_fn = os.path.join(csl_dir, 'cellSNP.tag.AD.mtx')
    vcf_fn = os.path.join(csl_dir, 'cellSNP.base.vcf')
    barcode_fn = os.path.join(csl_dir, 'cellSNP.samples.tsv')

    chrom_sizes = read_chrom_sizes(chrom_sizes_fn)
    dep_mm = mmread(dep_fn)
    alt_mm = mmread(alt_fn).tocsr()
    barcodes = read_cb_whitelist(barcode_fn)
    variants = read_vcf(vcf_fn, bin_size)

    co_markers = MarkerRecords(
        chrom_sizes,
        bin_size,
        cb_whitelist.toset(),
        seq_type='csl_snps'
    )

    for cb_idx, var_idx, tot in zip(dep_mm.col, dep_mm.row, dep_mm.data):
        cb = barcodes[cb_idx]
        if cb in cb_whitelist:
            alt = alt_mm[var_idx, cb_idx]
            ref = tot - alt
            chrom, bin_idx = variants[var_idx]
            co_markers[cb, chrom, bin_idx, 0] += ref
            co_markers[cb, chrom, bin_idx, 1] += alt

    return co_markers


def run_loadcsl(cellsnp_lite_dir, chrom_sizes_fn, output_json_fn, *,
                cb_whitelist_fn=None, bin_size=25_000):
    '''
    Read matrix files generated by cell snp lite to generate a json file of binned
    haplotype marker distributions for each cell barcode. These can be used to
    call recombinations using the downstream `predict` command.
    '''

    cb_whitelist = read_cb_whitelist(cb_whitelist_fn)
    co_markers = parse_cellsnp_lite(
        cellsnp_lite_dir,
        chrom_sizes_fn,
        bin_size=bin_size,
        cb_whitelist=cb_whitelist,
    )
    if output_json_fn is not None:
        log.info(f'Writing markers to {output_json_fn}')
        co_markers.write_json(output_json_fn)
    return co_markers